id: monthly_parquet_pipeline
namespace: zoomcamp
description: |
  Automatización para subir archivos .parquet a MinIO y cargarlos en DuckDB.
inputs:
  - id: year
    type: SELECT
    displayName: Select year
    values: ["2023", "2024"]
    defaults: "2024"
  - id: month
    type: SELECT
    displayName: Select month
    values: ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]
    defaults: "01"
variables:
  file: "yellow_tripdata_{{inputs.year}}-{{inputs.month}}.parquet"
  minio_bucket: "ny_taxi-bucket"
  duckdb_table: "public.yellow_tripdata"
tasks:
  - id: upload_to_minio
    type: io.kestra.plugin.aws.s3.Upload
    description: Upload the .parquet file to MinIO S3
    accessKeyId: minioadmin
    secretAccessKey: minioadmin
    endpoint: http://minio-container:9000
    bucket: "{{vars.minio_bucket}}"
    key: "{{vars.file}}"
    from: "/data/{{vars.file}}"
  - id: download_from_minio
    type: io.kestra.plugin.aws.s3.Download
    description: Download the .parquet file from MinIO S3
    accessKeyId: minioadmin
    secretAccessKey: minioadmin
    endpoint: http://minio-container:9000
    bucket: "{{vars.minio_bucket}}"
    key: "{{vars.file}}"
    to: "/app/{{vars.file}}"
  - id: load_into_duckdb
    type: io.kestra.plugin.jdbc.duckdb.Queries
    description: Load the .parquet file into DuckDB
    url: jdbc:duckdb:/data/ny_taxi.duckdb
    sql: |
      CREATE TABLE IF NOT EXISTS {{vars.duckdb_table}} AS
      FROM read_parquet('/app/{{vars.file}}');


# triggers:
#   - id: monthly_trigger
#     type: io.kestra.plugin.core.trigger.Schedule
#     cron: "0 1 1 * *"  # Primer día de cada mes a la 01:00